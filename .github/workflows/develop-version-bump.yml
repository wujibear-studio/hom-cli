name: Develop Version Management

on:
  pull_request:
    branches: [develop]
    types: [closed]

permissions:
  contents: write
  pull-requests: read

jobs:
  version-bump:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Setup Yarn
        run: |
          mkdir -p .yarn/releases
          npm install -g corepack
          corepack enable
          corepack prepare yarn@3.7.0 --activate
          cp ~/.cache/node/corepack/v1/yarn/3.7.0/yarn.js .yarn/releases/yarn-3.7.0.cjs
      
      - name: Install dependencies
        run: yarn install
      
      - name: Configure Git
        run: |
          echo "Configuring git as: github-actions[bot]"
          echo $(git config --get-all user.name)
          echo $(git config --get-all user.email)
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Git configuration complete:"
          echo $(git config --list)
      
      - name: Get PR Labels
        id: labels
        run: |
          LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name')
          if echo "$LABELS" | grep -q "version:major"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "version:minor"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "version:patch"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=none" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build
        if: steps.labels.outputs.bump != 'none'
        run: yarn build
      
      - name: Bump Version
        if: steps.labels.outputs.bump != 'none'
        run: |
          # Update version in package.json
          npm version ${{ steps.labels.outputs.bump }} --no-git-tag-version
          
          # Run oclif readme to update version in README
          yarn oclif readme
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          
          # Stage changes
          git add package.json
          git add README.md
          
          # Commit and tag
          git commit -m "Bump version to v${NEW_VERSION} [skip ci]"
          git tag "v${NEW_VERSION}" -m "Version ${NEW_VERSION}"
          
          # Push changes
          git push
          git push --tags 
